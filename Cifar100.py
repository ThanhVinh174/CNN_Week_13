(x_train, y_train), (x_test, y_test) = cifar100.load_data()
for i in range(9):
  plt.subplot(330+1+i)
  plt.imshow(x_train[i])
x_train.shape
print(y_train[1])
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /=255
x_test /=255
y_train = np_utils.to_categorical(y_train,100)
y_test = np_utils.to_categorical(y_test,100)
model = Sequential()
model.add(Conv2D(32,(3,3),activation = 'relu',kernel_initializer='he_uniform',padding ='same',input_shape = (32,32,3)))
model.add(Conv2D(32,(3,3),activation = 'relu',kernel_initializer='he_uniform',padding ='same'))
model.add(MaxPooling2D(2,2))
model.add(Conv2D(64,(3,3),activation = 'relu',kernel_initializer='he_uniform',padding ='same'))
model.add(Conv2D(64,(3,3),activation = 'relu',kernel_initializer='he_uniform',padding ='same'))
model.add(MaxPooling2D(2,2))
model.add(Conv2D(64,(3,3),activation = 'relu',kernel_initializer='he_uniform',padding ='same'))
model.add(Conv2D(64,(3,3),activation = 'relu',kernel_initializer='he_uniform',padding ='same'))
model.add(MaxPooling2D(2,2))
model.add(Flatten())
model.add(Dense(512, activation ='relu',kernel_initializer='he_uniform'))
model.add(Dense(100,activation ='softmax'))
model.summary()
opt = SGD(lr = 0.001)
model.compile(optimizer = opt, loss ='categorical_crossentropy', metrics = ['acc'])
his = model.fit(x_train, y_train, batch_size = 64, epochs = 100, validation_data = (x_test,y_test))
plot_history(his)
img = tf.keras.utils.load_img("/content/keyboard.jpg", target_size = (32,32))
plt.imshow(img)
plt.show()
img = tf.keras.utils.img_to_array(img)
img = img.reshape(1,32,32,3)
img = img.astype('float32')
img /=255
print(dict[np.argmax(model.predict(img),axis = 1)[0]])
img1 = tf.keras.utils.load_img("/content/wolf.jpg", target_size = (32,32))
plt.imshow(img1)
plt.show()
img1 = tf.keras.utils.img_to_array(img1)
img1 = img1.reshape(1,32,32,3)
img1 = img1.astype('float32')
img1 /=255
print(dict[np.argmax(model.predict(img1),axis = 1)[0]])
img2 = tf.keras.utils.load_img("/content/tractor.jpg", target_size = (32,32))
plt.imshow(img2)
img2 = tf.keras.utils.img_to_array(img2)
img2 = img2.reshape(1,32,32,3)
img2 = img2.astype('float32')
img2 /=255
print(dict[np.argmax(model.predict(img2),axis = 1)[0]])
