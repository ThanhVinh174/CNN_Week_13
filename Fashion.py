(x_train_2, y_train_2), (x_test_2, y_test_2) = fashion_mnist.load_data()
for i in range(9):
  plt.subplot(330+1+i)
  plt.imshow(x_train_2[i])
print(x_train_2.shape, y_train_2.shape)
print(x_test_2.shape, y_test_2.shape)
x_train_2 = x_train_2.reshape(60000,28,28,1)
x_test_2 = x_test_2.reshape(10000,28,28,1)
x_train_2 = x_train_2.astype('float32')
x_test_2 = x_test_2.astype('float32')
x_train_2 /=255
x_test_2 /=255
y_train_2 = np_utils.to_categorical(y_train_2)
y_test_2 = np_utils.to_categorical(y_test_2)
y_train_2.shape
model_fashion = Sequential()
model_fashion.add(Conv2D(32,(3,3),activation = 'relu',kernel_initializer='he_uniform',padding ='same',input_shape = (28,28,1)))
model_fashion.add(Conv2D(32,(3,3),activation = 'relu',kernel_initializer='he_uniform',padding ='same'))
model_fashion.add(MaxPooling2D(2,2))
model_fashion.add(Conv2D(64,(3,3),activation = 'relu',kernel_initializer='he_uniform',padding ='same'))
model_fashion.add(Conv2D(64,(3,3),activation = 'relu',kernel_initializer='he_uniform',padding ='same'))
model_fashion.add(MaxPooling2D(2,2))
model_fashion.add(Conv2D(64,(3,3),activation = 'relu',kernel_initializer='he_uniform',padding ='same'))
model_fashion.add(Conv2D(64,(3,3),activation = 'relu',kernel_initializer='he_uniform',padding ='same'))
model_fashion.add(MaxPooling2D(2,2))
model_fashion.add(Flatten())
model_fashion.add(Dense(128, activation ='relu',kernel_initializer='he_uniform'))
model_fashion.add(Dense(10,activation ='softmax'))
model_fashion.summary()
opt = SGD(lr = 0.001, momentum =0)
model_fashion.compile(optimizer = opt, metrics = 'accuracy', loss = 'categorical_crossentropy')
his_3 = model_fashion.fit(x_train_2,y_train_2, batch_size = 128, epochs = 50, validation_data = (x_test_2, y_test_2))
model_fashion.save('CNN_fashion_mnist.h5')
plot_history(his_3)
x_test_2 = x_test_2.reshape(10000, 28,28)
label = ['T-shirt/top','Trouser','Pullover','Dress','Coat','Sandal','Shirt','Sneaker','Bag','Ankle boot']
b = int(input('Mẫu muốn nhận dạng:'))
plt.imshow(x_test_2[b])
label[np.argmax(model_fashion.predict(x_test_2)[b])]
